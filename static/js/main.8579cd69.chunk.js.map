{"version":3,"sources":["components/Form/Form.jsx","components/Contascts/Contacts.jsx","components/Filter/Filter.jsx","components/Alert/Alert.jsx","components/App/App.jsx","index.js"],"names":["Form","state","name","number","handleChange","target","value","setState","handlerSubmit","e","preventDefault","addContact","props","newContact","prevState","id","shortId","generate","this","className","onSubmit","htmlFor","onChange","type","Component","Contacts","contacts","deleteContact","TransitionGroup","component","map","el","CSSTransition","timeout","classNames","onClick","Filter","filter","handleFilter","Alert","ok","App","showLogo","contactExist","findContact","contact","toLowerCase","includes","find","alertOk","localContacts","localStorage","getItem","length","JSON","parse","prevProps","setItem","stringify","searchedContacts","in","unmountOnExit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8579cd69.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport shortId from 'short-id';\nimport './Form.css';\n\nclass Form extends Component {\n\n    state = {\n        name: \"\",\n        number: \"\"\n    };\n\n    handleChange = ({target}) => {\n        \n        const {name, value} = target;\n\n        this.setState( {[name]: value} );\n         \n    };\n            \n    handlerSubmit = (e) => {\n\n        e.preventDefault();\n        const {addContact} = this.props;\n        const contact = this.newContact();\n        addContact(contact);\n        this.setState(prevState => {\n            \n            return {name: '', number: ''}\n\n        });\n\n    };\n\n    newContact = () => {\n\n        const {name, number} = this.state;\n        return {name: name, number: number, id: shortId.generate()};\n\n    };\n\n    render() {\n\n        const {name, number} = this.state;\n\n        return(\n            <form className=\"form\" onSubmit={this.handlerSubmit}>\n                <label htmlFor=\"contactName\" >Name</label>\n                <input name=\"name\" onChange={this.handleChange} value={name} type=\"text\"/>\n                <label htmlFor=\"contactNumber\" >Number</label>\n                <input name=\"number\" onChange={this.handleChange} value={number} type=\"number\"/>\n                <button type=\"submit\">Add Contact</button>\n            </form>\n        )\n    };\n\n};\n\nexport default Form;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport './Contacts.css';\n\nclass Contacts extends Component {\n\n    static propTypes = {\n        contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n        deleteContact: PropTypes.func.isRequired,\n      };\n\n    render() {\n        \n        const {contacts, deleteContact} = this.props;\n        \n        return (\n            <TransitionGroup component=\"ul\">\n\n                {\n                    contacts.map(el => {\n                        return (\n                            <CSSTransition key={el.id} timeout={250} classNames=\"contact\">\n                                <li >{el.name}: {el.number} <button type=\"button\" onClick={() => deleteContact(el.id)}>Delete</button></li>\n                            </CSSTransition>\n                        )\n                    })\n                }\n\n            </TransitionGroup>\n    )}\n\n};\n\nexport default Contacts;","import React, { Component } from 'react';\nimport './Filter.css';\nimport PropTypes from 'prop-types';\n\nclass Filter extends Component { \n\n  static propTypes = {\n    filter: PropTypes.string.isRequired,\n    handleFilter: PropTypes.func.isRequired,\n  };\n  \n  render () {\n\n    const {filter, handleFilter} = this.props;\n\n    return (\n\n        <div className=\"input\">\n                <input type=\"text\" onChange={handleFilter} value={filter} />\n        </div>\n\n    );\n  };\n};\n\nexport default Filter;","import React from 'react';\n\nconst Alert = (props) => { \n\n  return (\n    <div><h2>This contact is already exist!</h2><button onClick={props.ok}>OK</button></div>\n  )\n  \n};\n\nexport default Alert;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Form from '../Form/Form';\nimport Contacts from '../Contascts/Contacts';\nimport Filter from '../Filter/Filter';\nimport Alert from '../Alert/Alert';\nimport {CSSTransition} from 'react-transition-group';\n\nclass App extends Component {\n\n    state = {\n        showLogo: false,\n        contacts: [],\n        filter: '',\n        contactExist: false\n    };\n\n    componentDidMount() {\n\n        const localContacts = localStorage.getItem('contacts');\n        if(localContacts.length > 0) {\n            this.setState({contacts: JSON.parse(localContacts)});\n        }\n\n        this.setState(state => ({showLogo: !state.showLogo}));\n\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if(prevState !== this.state.contacts) {\n            localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n        }\n\n    };\n\n    findContact = () => {\n\n        const {contacts, filter} = this.state;\n            return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n\n    };\n\n    handleFilter = (e) => {\n\n        this.setState(prevState => {\n            return {filter: e.target.value}\n        });\n\n      };\n\n    addContact = (contact) => {\n\n        const {contacts} = this.state;\n\n        if (contacts.find((el) => el.name === contact.name)) {\n            this.setState({contactExist: true}) \n            return;\n        };\n        this.setState( state => {\n            const contacts = [...state.contacts, contact];\n            return { contacts };\n        });\n        \n    };\n\n    deleteContact = (id) => {\n\n        this.setState(prevState => {\n            return {contacts: prevState.contacts.filter(contact => contact.id !== id)};\n        });\n\n    };\n\n    alertOk = () => {\n        this.setState({contactExist: false})\n    };\n\n    render() {\n\n        const {filter, showLogo, contactExist} = this.state;\n        const searchedContacts = this.findContact();\n\n        return (\n            <>\n                <CSSTransition in={showLogo} unmountOnExit classNames=\"logo\" timeout={500}>\n                    <h1>Phonebook</h1>\n                </CSSTransition>\n                <h2>Contacts form</h2>\n                <Form addContact={this.addContact} />\n                <h2>Contacts list</h2>\n                <Filter filter={filter} handleFilter={this.handleFilter} />\n                <Contacts contacts={searchedContacts} deleteContact={this.deleteContact} />\n                <CSSTransition in={contactExist} unmountOnExit classNames=\"alert\" timeout={250}>\n                    <Alert ok={this.alertOk} />\n                </CSSTransition>\n            </>\n        );\n\n    };\n\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}